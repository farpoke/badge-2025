# This CMake file is a mix of the autogenerated one from the RPi Pico VS Code extension,
# the micropython/ports/rp2/CMakeLists.txt file, and custom additions/modifications.
#
# The micropython commands in particular appear to be quite fragile; handle with care.

cmake_minimum_required(VERSION 3.31)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Initialise pico_sdk from installed location
# (note this can come from environment, CMake cache etc)

# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================

# Look for the pico board headers in the badge directory, specifically our `badge-2025.h` header.
set(PICO_BOARD_HEADER_DIRS ${CMAKE_SOURCE_DIR}/badge)
set(PICO_BOARD badge-2025 CACHE STRING "Board type")

# Name of our project and target, stored where micropython can find it.
set(MICROPY_TARGET badge-2025)

# Need a path to the micropython repository.
set(MICROPY_DIR "$ENV{MICROPY_DIR}" CACHE PATH "Path to micropython repository")

# Pull in micropython and pico SDK (must be before project).
include(${MICROPY_DIR}/py/py.cmake)
include(${MICROPY_DIR}/extmod/extmod.cmake)
include(pico_sdk_import.cmake)

# Define CMake project.
project(${MICROPY_TARGET} C CXX ASM)

# Initialise the Raspberry Pi Pico SDK.
pico_sdk_init()

include(${MICROPY_DIR}/py/usermod.cmake)

# Create target executable with our sources.
add_executable(${MICROPY_TARGET}
        main.cpp
        core/core1.cpp
        core/irq.cpp
        usb/msc.cpp
        usb/usb-descriptors.cpp
        usb/usb.cpp
)
target_include_directories(${MICROPY_TARGET} PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}
)

target_compile_definitions(${MICROPY_TARGET} PUBLIC
        # Use all 8 KiB of "scratch" memory for the core0 stack.
        # We will allocate some memory for the core1 stack elsewhere.
        PICO_STACK_SIZE=0x2000
        PICO_CORE1_STACK_SIZE=0
)

target_compile_options(${MICROPY_TARGET} PRIVATE
        # Ask the compiler to check and warn us about stack usage.
        -fstack-usage
        -Wstack-usage=5120
        # Ask the compiler to be very strict.
        -Wall
        -Werror
        # Ask the compiler to always include debug information.
        -g
)

# core1 has a much smaller stack, so warn about much smaller stack usage for that code unit.
set_source_files_properties(core/core1.cpp PROPERTIES COMPILE_OPTIONS "-Wstack-usage=1024")

# Set the target program name and version for the Pico SDK.
pico_set_program_name(${MICROPY_TARGET} "badge-2025")
pico_set_program_version(${MICROPY_TARGET} "0.1")

# Configure pico SDK stdio.
pico_enable_stdio_uart(${MICROPY_TARGET} 1) # Enable stdio over UART (with the pins we define in our board header).
pico_enable_stdio_usb(${MICROPY_TARGET} 0)  # No stdio over USB; we set up our own CDC and MSC interfaces.

# Collect pico SDK libraries we want to use.
# This is mostly important because we need to tell the micropython CMake code about them later (see mpy.cmake).
set(PICO_SDK_TARGETS
        hardware_base
        hardware_flash
        hardware_gpio
        hardware_irq
        hardware_pwm
        hardware_regs
        hardware_resets
        hardware_rtc
        hardware_spi
        hardware_structs
        hardware_sync
        hardware_sync_spin_lock
        hardware_timer
        hardware_uart
        pico_aon_timer
        pico_base_headers
        pico_bootsel_via_double_reset
        pico_multicore
        pico_platform
        pico_platform_compiler
        pico_platform_panic
        pico_platform_sections
        pico_stdio
        pico_stdlib
        pico_time
        pico_util
        tinyusb_device
)

# Add libraries to our target.
target_link_libraries(${MICROPY_TARGET} ${PICO_SDK_TARGETS})

# Include our main CMake fragment to setup our micropython port and sources.
include(mpy/mpy.cmake)

# Include our badge code and module.
include(badge/badge.cmake)

# Include our assets and add them to our target.
add_subdirectory(assets)
target_link_libraries(${MICROPY_TARGET} assets)

# Ask the pico SDK to generate extra outputs for our target.
pico_add_extra_outputs(${MICROPY_TARGET})

# Include the micropython build script and commands.
include(${MICROPY_PY_DIR}/mkrules.cmake)

# Ask the toolchain to give us a disassembled output file.
pico_get_runtime_output_directory(${MICROPY_TARGET} output_path)
add_custom_command(
        TARGET
            ${MICROPY_TARGET}
        POST_BUILD
        COMMAND
            ${CMAKE_OBJDUMP}
        ARGS
            -xSC
            $<TARGET_FILE:${MICROPY_TARGET}>
            > ${output_path}$<IF:$<BOOL:$<TARGET_PROPERTY:${MICROPY_TARGET},OUTPUT_NAME>>,$<TARGET_PROPERTY:${MICROPY_TARGET},OUTPUT_NAME>,$<TARGET_PROPERTY:${MICROPY_TARGET},NAME>>.txt
        VERBATIM
)
